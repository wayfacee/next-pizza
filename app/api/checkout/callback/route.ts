// –æ—Ä–¥–µ—Ä –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–µ–Ω–¥–∏–Ω–≥, –∏ —é–∫–∞—Å—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± –∂—Ç–æ–º
// –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ http

import { PaymentCallbackData } from "@/@types/yookassa";
import { prisma } from "@/prisma/prisma-client";
import { OrderSuccessTemplate } from "@/shared/components";
import { sendEmail } from "@/shared/lib";
import { CartItemDTO } from "@/shared/services/dto/cart.dto";
import { OrderStatus } from "@prisma/client";
import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  try {
    // –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º PaymentCallbackData
    const body = (await req.json()) as PaymentCallbackData;

    const order = await prisma.order.findFirst({
      where: {
        id: Number(body.object.metadata.order_id),
      },
      // include: {
      //   user: true, // –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —é–∑–µ—Ä—É
      // –Ω–æ —É–∂–µ –≤ –æ—Ä–µ–¥–µ—Ä–µ –µ—Å—Ç—å –µ–º–∞–∏–ª, —Ç–∞–∫ —á–æ —É–∂–µ –Ω–µ –Ω–∞–¥–æ
      // },
    });

    // –≤ –ª–æ–≥–∞—Ö —é–∫–∞—Å—Å–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–∫–∞–∑–∞–ª –±—ã –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç —Ä–µ—Ç—É—Ä–Ω—Å
    if (!order) {
      return NextResponse.json({ error: "Order not found" });
    }

    // youkassa –≤–æ–∑–≤. —Ç–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å
    const isSucceded = body.object.status === "succeeded";

    await prisma.order.update({
      where: {
        id: order.id,
      },
      data: {
        status: isSucceded ? OrderStatus.SUCCEEDED : OrderStatus.CANCALLED,
      },
    });

    const items = JSON.parse(order?.items as string) as CartItemDTO[];

    if (!isSucceded) {
      await sendEmail(
        order.email,
        "Next Pizza / –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω üöÄ",
        OrderSuccessTemplate({ orderId: order.id, items }),
      );
    } else {
      // –µ—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω, —Ç–æ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —é–∑–µ—Ä—É
    }
  } catch {
    return NextResponse.json({ error: "Server error" });
  }
}
